
R version 2.11.1 (2010-05-31)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "dpmixsim"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('dpmixsim')
Loading required package: oro.nifti
Loading required package: XML

oro.nifti: Rigorous - NIfTI Input / Output (version = 0.1.4)

> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("dpmixsim")
> ### * dpmixsim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dpmixsim
> ### Title: Dirichlet Process mixture model for clustering and image
> ###   segmentation
> ### Aliases: dpmixsim
> ### Keywords: models
> 
> ### ** Examples
> 
> ## Example 1: simple test using 'galaxy' data
>    data("galaxy")
>    x <- prescale(galaxy$speed) 
>    res <- dpmixsim(x, M=1, a=1, b=0.001, upalpha=1, maxiter=4000, rec=3000)
simulation length: 82 
Processing 4000 iterations:	 '.' = 100 iterations
........................................
time of gibbdpm:  0.0035  min
> ## post-simulation
>    z <- postdpmixciz(x, res=res, rec=3000, ngrid=100, plot=TRUE)
most frequent k (kfreq): 6 
n.iterations with kfreq: 814 
> ## Example 2: MRI segmentation
> ## Testing note: this example should reproduce the equivalent segmented images
> ## used in the author's references 
>    slicedata <- readsliceimg(fbase="t1_pn3_rf0", swap=FALSE)
>    image(slicedata$niislice, col=gray((0:255)/256), main="original image")
>    x <- prescale(premask(slicedata, subsamp=TRUE))
>    fsave <- file.path(tempdir(), "segtest2.sav")
>    # answ <- readline("Run MCMC simulation first ? ")
>    # run <- FALSE
>    # if (substr(answ, 1, 1) == "y") { run <- TRUE }
>    rec <- 2000
>    ngrid <- 100
>    # if(run) {
>    res <- dpmixsim(x, rec=rec, fsave=fsave)
simulation length: 4762 
Processing 4000 iterations:	 '.' = 100 iterations
........................................
time of gibbdpm:  0.3085  min
saving simulation  /tmp/Rtmp9Mhidh/segtest2.sav ...
>    # } else {
>    #  load(file=fsave)
>    #  cat("loaded",fsave,"\n")
>    # }
> ## post-simulation
>    z <- postdpmixciz(x, res=res, rec=rec, ngrid=ngrid)
most frequent k (kfreq): 5 
n.iterations with kfreq: 1151 
>    x <- prescale(premask(slicedata, subsamp=FALSE)) # use full-sized image after estimation 
>    cx <- postdataseg(x, z, ngrid=ngrid)
>    cat("*** view grouped segmentations:\n")
*** view grouped segmentations:
>    postimgclgrp(slicedata$mask, cx, palcolor=FALSE)
>    cat("*** display all clusters:\n")
*** display all clusters:
>    postimgcomps(slicedata$mask, cx)
Display individual clusters: 
palette= 0 51 102 153 204 256 
>    cat("*** re-cluster with 4 clusters:\n")
*** re-cluster with 4 clusters:
>    postkcluster(slicedata$mask, cx, clk=4)
Loading required package: cluster
colorcluster with 4 components:
cx
    0   102   204   256 
20298  3134  6069  9776 
Display individual clusters: 
palette= 0 102 204 256 
> 
> 
> 
> cleanEx()

detaching ‘package:cluster’

> nameEx("galaxy")
> ### * galaxy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: galaxy
> ### Title: Galaxy velocities
> ### Aliases: galaxy
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(galaxy)
> ## maybe str(galaxy) ; plot(galaxy) ...
> 
> 
> 
> cleanEx()
> nameEx("postdataseg")
> ### * postdataseg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: postdataseg
> ### Title: Data segmentation
> ### Aliases: postdataseg
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## see Example 2 in dpmixsim.
> ## End(Not run)
> 
> 
> cleanEx()
> nameEx("postdpmixciz")
> ### * postdpmixciz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: postdpmixciz
> ### Title: Summary statistics and cluster estimation
> ### Aliases: postdpmixciz
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Example 2: MRI brain image segmentation
> ##D   slicedata <- readsliceimg(fbase="t1_pn3_rf0", swap=FALSE)
> ##D   image(slicedata$niislice, col=gray((0:255)/256), main="original image")
> ##D   x0 <- premask(slicedata, subsamp=TRUE)
> ##D   x  <- prescale(x0) 
> ##D   fsave <- "/tmp/segtest2.sav"
> ##D   answ <- readline("Run MCMC simulation first ? ")
> ##D   run <- FALSE
> ##D   if (substr(answ, 1, 1) == "y") { run <- TRUE }
> ##D   rec <- 2000
> ##D   ngrid <- 100
> ##D   if (run) {
> ##D     res <- dpmixsim(x, M=1, a=1, b=2, upalpha=1, maxiter=4000, rec=rec,
> ##D                     fsave=fsave)
> ##D   } else {
> ##D     load(file=fsave)
> ##D     cat("loaded",fsave,"\n")
> ##D   }
> ##D   ## post-simulation
> ##D   z <- postdpmixciz(x, res=res, rec=rec, ngrid=ngrid, plot=TRUE)
> ## End(Not run)
> 
> 
> cleanEx()
> nameEx("postimgclgrp")
> ### * postimgclgrp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: postimgclgrp
> ### Title: Segment image with the estimated number of components
> ### Aliases: postimgclgrp
> ### Keywords: dplot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## see Example 2 in `dpmixsim'.
> ## End(Not run)
> 
> 
> cleanEx()
> nameEx("postimgcomps")
> ### * postimgcomps
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: postimgcomps
> ### Title: Display cluster components
> ### Aliases: postimgcomps
> ### Keywords: dplot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## see Example 2 in `dpmixsim'.
> ## End(Not run)
> 
> 
> cleanEx()
> nameEx("postkcluster")
> ### * postkcluster
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: postkcluster
> ### Title: Segmentation with a fixed number of clusters
> ### Aliases: postkcluster
> ### Keywords: cluster
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## see Example 2 in `dpmixsim'.
> ## End(Not run)
> 
> 
> cleanEx()
> nameEx("premask")
> ### * premask
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: premask
> ### Title: Data preparation
> ### Aliases: premask
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   slicedata <- readsliceimg(fbase="t1_pn3_rf0", swap=FALSE)
> ##D   x0 <- premask(slicedata, subsamp=TRUE)
> ##D   x  <- prescale(x0) 
> ##D   print(str(x))
> ## End(Not run)
> 
> 
> cleanEx()
> nameEx("prescale")
> ### * prescale
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: prescale
> ### Title: Data preparation
> ### Aliases: prescale
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   data("galaxy")
> ##D   x0 <- galaxy$speed
> ##D   x  <- prescale(x0) 
> ##D   print(range(x))
> ## End(Not run)
> 
> 
> cleanEx()
> nameEx("readsliceimg")
> ### * readsliceimg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readsliceimg
> ### Title: Read MRI slice data
> ### Aliases: readsliceimg
> ### Keywords: IO
> 
> ### ** Examples
> 
> ## Not run: 
> ##D slicedata <- readsliceimg(fbase="t1_pn3_rf0", swap=FALSE)
> ##D print(str(slicedata))
> ## End(Not run)
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  22 0.04 22.085 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
